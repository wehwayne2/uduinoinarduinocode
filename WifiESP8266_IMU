#include <Uduino_Wifi.h>
Uduino_Wifi uduino("IMU");

// Servo
#if defined(ESP32)
#include <ESP32Servo.h>
#else
#include <Servo.h>
#endif

#include "I2Cdev.h"
#include "MPU6050_6Axis_MotionApps20.h"
#include <SPI.h>
#include <Adafruit_MCP3008.h>

// Define MCP3008 connections
#define MCP_CS_PIN D8  // Chip select pin

Adafruit_MCP3008 adc;

#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
#include "Wire.h"
#endif

MPU6050 mpu;

#define MAXSERVOS 8

#define INTERRUPT_PIN 16 // use pin 16 (D0) on ESP8266

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z] quaternion container
VectorInt16 aa;         // [x, y, z] accel sensor measurements
VectorInt16 aaReal;     // [x, y, z] gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z] world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z] gravity vector
float euler[3];         // [psi, theta, phi] Euler angle container
float ypr[3];           // [yaw, pitch, roll] yaw/pitch/roll container and gravity vector

void setup() {
  Wire.begin();
  Wire.setClock(400000); // 400kHz I2C clock

  Serial.begin(115200);

  adc.begin(MCP_CS_PIN);// Initialize MCP3008

#if defined(__AVR_ATmega32U4__) // Leonardo
  while (!Serial) {}
#elif defined(__PIC32MX__)
  delay(1000);
#endif

  mpu.initialize();
  devStatus = mpu.dmpInitialize();
  mpu.setXGyroOffset(54); //++
  mpu.setYGyroOffset(-21); //--
  mpu.setZGyroOffset(5);

  if (devStatus == 0) {
    mpu.setDMPEnabled(true);
    dmpReady = true;
    packetSize = mpu.dmpGetFIFOPacketSize();
  } else {
    Serial.println("Error!");
  }

  uduino.setPort(4222);   // default 4222
  uduino.connectWifi("interface", "bonjourlemonde");
}

void loop() {
  uduino.update();

  if (uduino.isInit()) {
    // Read from channels 0, 1, and 2
  int sensorValue1 = adc.readADC(0);
  int sensorValue2 = adc.readADC(1);
  int sensorValue3 = adc.readADC(2);
  int sensorValue4 = adc.readADC(3);
  int sensorValue5 = adc.readADC(4);
  int sensorValue6 = adc.readADC(5);

  // Map the sensor values from 400-1000 to 0-10
  int mappedValue1 = map(sensorValue1, 400, 1000, 0, 10);
  int mappedValue2 = map(sensorValue2, 400, 800, 0, 10);
  int mappedValue3 = map(sensorValue3, 500, 1000, 0, 10);
  int mappedValue4 = map(sensorValue4, 300, 800, 0, 10);
  int mappedValue5 = map(sensorValue5, 300, 800, 0, 10);
  int mappedValue6 = map(sensorValue6, 100, 400, 0, 10);
  
  // Ensure the mapped values are within bounds
  mappedValue1 = constrain(mappedValue1, 0, 10);
  mappedValue2 = constrain(mappedValue2, 0, 10);
  mappedValue3 = constrain(mappedValue3, 0, 10);
  mappedValue4 = constrain(mappedValue4, 0, 10);
  mappedValue5 = constrain(mappedValue5, 0, 10);
  mappedValue6 = constrain(mappedValue6, 0, 10);

    if (!dmpReady) {
      Serial.println("IMU not connected.");
      delay(10);
      return;
    }

    mpuIntStatus = mpu.getIntStatus();
    fifoCount = mpu.getFIFOCount();

    if ((mpuIntStatus & 0x10) || fifoCount == 1024) { // check for overflow
      mpu.resetFIFO();
    } else if (mpuIntStatus & 0x02) {
      while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

      mpu.getFIFOBytes(fifoBuffer, packetSize);
      fifoCount -= packetSize;

      // Print the mapped sensor values
      uduino.print(mappedValue1); uduino.print('|');
      uduino.print(mappedValue2); uduino.print('|');
      uduino.print(mappedValue3); uduino.print('|');
      uduino.print(mappedValue4); uduino.print('|');
      uduino.print(mappedValue5); uduino.print('|');
      uduino.print(mappedValue6); uduino.print('|');

      SendQuaternion();
      // SendEuler();
      // SendYawPitchRoll();
      // SendRealAccel();
      // SendWorldAccel();
      
      delay(50); // Add delay to reduce transmission frequency
    }
  }
}

void SendQuaternion() {
  mpu.dmpGetQuaternion(&q, fifoBuffer);
  uduino.print("r/");
  uduino.print(q.w, 4); uduino.print("/");
  uduino.print(q.x, 4); uduino.print("/");
  uduino.print(q.y, 4); uduino.print("/");
  uduino.println(q.z, 4);
}
